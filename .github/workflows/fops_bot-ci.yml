name: FOPS Bot CI

on:
  push:
    branches:
      - "main"
    tags:
      - "*"
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # test:
  #   name: Pytest the Bot
  #   runs-on: ubuntu-latest
  #   needs: [formatblack, build-and-publish-image]
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 1
  #     - name: Test the bot image
  #       run: export TAG=main && docker compose -f docker-compose.yml run fops_bot test
  #     - name: Discord notification
  #       if: ${{ failure() }}
  #       env:
  #         DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  #       uses: Ilshidur/action-discord@master
  #       with:
  #         args: "FopsBot Pytest failed!"

  formatblack:
    name: Black Formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check files using the black formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: "."

      - name: Annotate diff changes using reviewdog
        if: steps.action_black.outputs.is_formatted == 'true'
        uses: reviewdog/action-suggester@v1
        with:
          tool_name: blackfmt

      # - name: Fail if actions taken
      #   if: steps.action_black.outputs.is_formatted == 'true'
      #   run: exit 1

      # - name: Discord notification
      #   if: ${{ failure() }}
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      #   uses: Ilshidur/action-discord@master
      #   with:
      #     args: "Black formatter reported errors in {{ EVENT_PAYLOAD.pull_request.html_url }} !"

  build-and-publish-image:
    name: Build and Publish Docker Images
    runs-on: ubuntu-latest
    needs: [formatblack]
    strategy:
      matrix:
        include:
          - service: fops_bot
            context: ./fops_bot
            tag: ghcr.io/snowsune/fops-bot:${{ github.sha }}
            notify_name: Fops Bot
          - service: yt_dlp_service
            context: ./yt_dlp_service
            tag: ghcr.io/snowsune/yt-dlp-service:${{ github.sha }}
            notify_name: yt-dlp Service
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ matrix.tag }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get Docker image size
        id: image_size
        run: |
          SIZE=$(docker images ${{ matrix.tag }} --format "{{.Size}}")
          echo "IMAGE_SIZE=$SIZE" >> $GITHUB_ENV

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: ncatelli/action-discord@115-add-wait-parameter-prefix
        with:
          args: "Built and published a new ${{ matrix.notify_name }} docker image to `${{ matrix.tag }}`! Image size: `${{ env.IMAGE_SIZE }}`"
